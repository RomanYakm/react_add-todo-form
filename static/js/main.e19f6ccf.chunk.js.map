{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","id","title","completed","todoClass","classNames","TodoList","todos","map","username","getUser","userId","usersFromServer","find","initialTodos","App","useState","setTodos","newTitle","setTitle","selectedUser","setselectedUser","titleError","setTitleError","userError","setUserError","action","method","onSubmit","event","preventDefault","noTitle","trim","actualTodos","reduce","prev","next","Math","max","Infinity","htmlFor","type","placeholder","value","onChange","target","Number","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e19f6ccf.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../types/User';\n\ntype UserType = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<UserType> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype TodoType = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<TodoType> = ({ todo }) => {\n  const {\n    id,\n    title,\n    user,\n    completed,\n  } = todo;\n\n  const todoClass = classNames(\n    'TodoInfo',\n    { 'TodoInfo--completed': completed },\n  );\n\n  return (\n    <article\n      data-id={id}\n      className={todoClass}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype TodoType = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<TodoType> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo key={todo.id} todo={todo} />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import './App.scss';\nimport React, { useState } from 'react';\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nexport const initialTodos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState(initialTodos);\n  const [newTitle, setTitle] = useState('');\n  const [selectedUser, setselectedUser] = useState(0);\n  const [titleError, setTitleError] = useState(false);\n  const [userError, setUserError] = useState(false);\n\n  const handleAddTodo = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const noTitle = !newTitle || newTitle.trim() === '';\n\n    if (noTitle) {\n      setTitleError(true);\n    }\n\n    if (!selectedUser) {\n      setUserError(true);\n    }\n\n    if (noTitle || !selectedUser) {\n      return;\n    }\n\n    setTodos((actualTodos) => {\n      return [\n        ...actualTodos,\n        {\n          title: newTitle,\n          userId: selectedUser,\n          completed: false,\n          user: getUser(selectedUser),\n          id: actualTodos\n            .map(({ id }) => id)\n            .reduce((prev, next) => Math.max(prev, next), -Infinity) + 1,\n        },\n      ];\n    });\n    setTitle('');\n    setselectedUser(0);\n  };\n\n  const handleChangeTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitleError(false);\n    setTitle(event.target.value);\n  };\n\n  const handleSelectUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserError(false);\n    setselectedUser(Number(event.target.value));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleAddTodo}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            id=\"title\"\n            name=\"title\"\n            type=\"text\"\n            placeholder=\"Enter a title\"\n            data-cy=\"titleInput\"\n            value={newTitle}\n            onChange={handleChangeTitle}\n          />\n\n          {titleError && (\n            <span className=\"error\">&nbsp;Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">User: </label>\n          <select\n            id=\"userSelect\"\n            name=\"userSelect\"\n            data-cy=\"userSelect\"\n            value={selectedUser}\n            onChange={handleSelectUser}\n          >\n            <option value=\"0\" disabled>\n              Choose a user\n            </option>\n            {usersFromServer.map((user) => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {userError && (\n            <span className=\"error\">&nbsp;Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}